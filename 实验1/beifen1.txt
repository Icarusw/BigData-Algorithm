#include <iostream>
#include <cstdio>
#include <cstdlib>
#define MaxSize 100010

using namespace std;

typedef struct node
{
    int bsize;
    int btime;
    struct node *next;
    struct node *pior;
}Bucket,*pBucket;

void addItem(pBucket h,int t)
{
    pBucket p;
    p=(pBucket)malloc(sizeof(Bucket));
    p->bsize=1;
    p->btime=t;
    p->next=h;
    p->pior=h->pior;
    h->pior->next=p;
    h->pior=p;

}
void Delete(pBucket h,int t,int size_win)
{
    pBucket p;
    while(1)
    {
        p=h->next;
        if(p->btime<(t-size_win))
           {
               h->next=p->next;
               p->next->pior=h;
               free(p);
           }
        else
            break;

    }

}

void Merge(pBucket h,int max_num )
{
    int i,t,size,same;
    pBucket p,q;
    q=h->pior;
    while(q!=h)
    {
        same=1;
		p=q;
            for(i=1;i<=max_num;i++)
            {
                if(p->pior->bsize!=p->bsize || p->pior==h)
                {
                    same=0;
                    break;

                }
				p=p->pior;
            }
            if(same==1)
            {
                p=q->pior;
                t=p->btime;
                size=(p->bsize)*max_num;
                for(i=1;i<max_num;i++)
                {
                    p=q->pior;
                    p->pior->next=p->next;
                    p->next->pior=p->pior;
                    free(p);

                }
                p->pior->bsize=size;
                p->pior->btime=t;
            }
        else
            break;
        q=q->pior;
    }
}


int Print_estimate(pBucket h,int max_num)
{
    pBucket p;
    int total_num=0;
    p=h->next;
    total_num+=p->bsize*(1.0/max_num);
    printf("size : %d, time:%d\n",p->bsize,p->btime);
    p=p->next;
    while(p!=h)
    {
        printf("size : %d, time:%d\n",p->bsize,p->btime);
        total_num+=p->bsize;
        p=p->next;
    }
    printf("estimate total: %d\n",total_num);
    return total_num;
}
int Prin_real(int window[],int size_win)
{
    int i,num=0;
    for(i=0;i<size_win;i++)
        num+=window[i];
    printf("real total:%d\n",num);
    return num;
}

int main()
{
    FILE *fp;
    int temp;//临时变量，用来记录该时刻的数集，1或0
    int t_now=0,t_need,max_num_buc;
    int window[MaxSize]={0},size_win;
    int est_num,real_num;
    pBucket Buc;
    Buc=(pBucket)malloc(sizeof(Bucket));
    Buc->next=Buc;
    Buc->pior=Buc;              //头指针初始化
    if(!(fp=fopen(".\\01stream.txt","r")))
        printf("FAIL TO OPEN FILE");
    printf("请输入滑动窗口大小：\n");
    scanf("%d",&size_win);
    printf("请输入想获取数据的时间：\n");
    scanf("%d",&t_need);
    printf("请输入精度：\n");
    scanf("%d",&max_num_buc);


    while(fscanf(fp,"%d",&temp)!=EOF && t_need!=t_now)
    {
        if(temp==1)
            {
                window[t_now%size_win]=1;
                addItem(Buc,t_now);//新建一个桶；
				Merge(Buc,max_num_buc );
				Delete(Buc,t_now,size_win);
            }
        t_now++;
    }
    fclose(fp);
    est_num=Print_estimate(Buc,max_num_buc);
    real_num=Prin_real(window,size_win);
    printf("误差：%f\n",(float)(est_num-real_num)/(float)real_num);

    return 0;
}
